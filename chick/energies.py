from chick.utils.types import Energy


def monocular_2d_energy(x_sample, x_2d, center, camera) -> Energy:
    """
    Energy function for conditioning on a monocular 2D pose.
    :param x_sample: The 3D pose sample generated by the model.
    :param x_2d: The 2D pose.
    :param center: The center of the 3D pose.
    :param camera: The camera used to project the 3D pose.
    :return: The energy of the sample.
    """
    x_sample = x_sample - center.unsqueeze(0).permute(0, 1, 3, 2)
    x_sample = x_sample.permute(0, 3, 1, 2)
    x_2d_projected = camera.proj2D(x_sample)

    energy = (
        ((x_2d_projected - x_2d.permute(0, 3, 1, 2)) ** 2).mean(-1).mean(-1).mean(-1)
    )

    return {
        "train": energy,
    }


def inpaint_2d_energy(x_sample, x_2d, center, **kwargs):
    return {
        "input_2D": x_2d + center.unsqueeze(0).permute(0, 1, 3, 2)[..., [0, 1], :],
    }
